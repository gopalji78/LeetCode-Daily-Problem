PROBLEM NAME:  Maximum Number of Achievable Transfer Requests
Problem Link: https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/description/

class Solution {
public:
    void dfs(int index, vector<vector<int>> &requests, vector<int>& indegree, int n, int &ans, int processedCount) {
        if (index == requests.size()) {
            for (int i=0; i<n; i++) {
                if (indegree[i] != 0) {
                    return;
                }
            }

            ans = max(ans, processedCount);
            return;
        }

        dfs(index+1, requests, indegree, n, ans, processedCount);
        int from = requests[index][0], to = requests[index][1];

        indegree[from]--;
        indegree[to]++;
        dfs(index+1, requests, indegree, n, ans, processedCount+1);
        indegree[from]++;
        indegree[to]--;
    }
    int maximumRequests(int n, vector<vector<int>>& requests) {
        vector<int> indegree(n, 0);
        int ans = 0;
        dfs(0, requests, indegree, n, ans, 0);
        return ans;
    }
};
