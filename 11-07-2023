PROBLEM NAME: All Nodes Distance K in Binary Tree
Problem Link: https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, TreeNode*> nodeToParent;   
    void markParent(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();

            if (node->left) {
                nodeToParent[node->left] = node;
                q.push(node->left);
            }
            if (node->right) {
                nodeToParent[node->right] = node;
                q.push(node->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        markParent(root);
        vector<int> kDistacneNeighbour;

        queue<pair<TreeNode*, int>>  q;
        unordered_map<TreeNode*, bool> vis;
        q.push({target, 0});
        vis[target] = true;

        while (!q.empty()) {
            TreeNode* node = q.front().first;
            int steps = q.front().second;
            q.pop();

            if (steps == k) {
                kDistacneNeighbour.push_back(node->val);
                continue;
            }

            if (nodeToParent.find(node) != nodeToParent.end() && vis.find(nodeToParent[node]) == vis.end()) {
                q.push({nodeToParent[node], steps+1});
                vis[nodeToParent[node]] = true;
            }

            if (node->left && vis.find(node->left) == vis.end()) {
                q.push({node->left, steps+1});
                vis[node->left] = true;
            }

            if (node->right && vis.find(node->right) == vis.end()) {
                q.push({node->right, steps+1});
                vis[node->right] = true;
            }
        }
        return kDistacneNeighbour;
    }
};
