PROBLEM NAME: Find Eventual Safe States
PRoblem Link: https://leetcode.com/problems/find-eventual-safe-states/description/


class Solution {
public:
    bool dfs(int node, vector<int>& vis, vector<vector<int>>& graph) {
        vis[node] = 2;
        for (auto it: graph[node]) {
            if (vis[it] == 0) {
                if (dfs(it, vis, graph) == true) return true;
            }
            if (vis[it] == 2) return true;
        }
        vis[node] = 1;
        return false;
    }

    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> vis(n, 0);
        for (int i=0; i<n; i++) {
            if (!vis[i]) {
                dfs(i, vis, graph);
            }
        }

        vector<int> safe;
        for (int i=0; i<n; i++) {
            if (vis[i] != 2) safe.push_back(i);
        }
        return safe;
    }
};
