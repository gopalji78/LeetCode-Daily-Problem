PROBLEM NAME: Course Schedule
Problem Link: https://leetcode.com/problems/course-schedule/description/


class Solution {
public:
    // void dfs(int node, vector<int> adj[], vector<int>&vis, stack<int>& st) {
    //     vis[node] = 1;

    //     for (auto it: adj[node]) {
    //         if (!vis[it]) {
    //             dfs(it, adj, vis, st);
    //         }
    //     }

    //     st.push(node);
    // }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> adj[numCourses];
        for (auto it: prerequisites) {
            adj[it[0]].push_back(it[1]);
        }

        vector<int> indegree(numCourses, 0);
        for (int i=0; i<numCourses; i++) {
            for (auto it: adj[i]) {
                indegree[it]++;
            }
        }

        queue<int> q;
        for (int i=0; i<numCourses; i++) {
            if (indegree[i] == 0) q.push(i);
        }


        vector<int> ans;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);

            for (auto it: adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0) q.push(it);
            }
        }


        if (ans.size() == numCourses) return true;
        return false;

        
    }
};
