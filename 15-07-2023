PROBLEM NAME: Maximum Number of Events That Can Be Attended II
Problem Link: https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/description/


class Solution {
public:
    int solver(vector<vector<int>>& events, vector<vector<int>>& dp, int n, int pos, int k) {
        if (pos>=n || k==0) return 0;

        if (dp[pos][k] != -1) return dp[pos][k];
        int i;
        vector<int> temp = {events[pos][1], INT_MAX, INT_MAX};
        i = upper_bound(events.begin() + pos + 1, events.end(), temp) - events.begin();
        return dp[pos][k] = max(solver(events, dp, n, pos+1, k), events[pos][2] + solver(events, dp, n, i, k-1));
    }
    int maxValue(vector<vector<int>>& events, int k) {
        int n = events.size();
        sort(events.begin(), events.end());

        vector<vector<int>> dp(n+1, vector<int>(k+1, -1));
        return solver(events, dp, n, 0, k);
    }
};
